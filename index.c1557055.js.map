{"mappings":"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","sources":["src/five-days.js"],"sourcesContent":["'use strict';\nimport {\n  formatDate,\n  getDayOfWeek,\n  createCardsMarkup,\n  getDailyData,\n  moreInfoData,\n  createMoreInfoMarkup,\n  iconMapping,\n  snowSvg,\n  sunSvg,\n  cloudsAndSunSvg,\n  cloudySvg,\n} from './utilsForFiveDays.js';\nlet selectedDay;\nconst moreInfoCards = document.querySelector('.more-info-container');\nconst cardsList = document.querySelector('.days-cards');\nconst sectionTitle = document.querySelector('.five-days-section__title');\nconst moreInfoContainer = document.querySelector('.more-info-container');\nconst fiveDaysSectionContainer = document.querySelector('.five-days-section');\n\nconst APIKEY = '072ec51636e5141423703ba32d12100f';\nconst urlForFiveDaysWeather = (lat, lon) => {\n  return `https://api.openweathermap.org/data/2.5/forecast/?lat=${lat}&lon=${lon}&appid=${APIKEY}&units=metric&lang=en`;\n};\n\n//de modificat city cu orasul din input\nlet city = 'Bucuresti';\nsectionTitle.textContent = city;\n//url pentru a afla coordonatele orasului din input(doar trebuie modificat pe linia 22)\nconst urlForCoordinates = () => {\n  return `https://api.openweathermap.org/geo/1.0/direct?q=${city}&appid=${APIKEY}`;\n};\n\nconst urlForCoordinatesForSearchedCity = city => {\n  return `https://api.openweathermap.org/geo/1.0/direct?q=${city}&appid=${APIKEY}`;\n};\n\n//aflare coordonate\nconst cityCoordinates = async () => {\n  const response = await fetch(urlForCoordinates());\n  const data = await response.json();\n  const coordinates = { lat: data[0].lat, lon: data[0].lon };\n  return coordinates;\n};\n\nconst searchedCityCoordinates = async () => {\n  const response = await fetch(\n    urlForCoordinatesForSearchedCity(searchInput.value)\n  );\n  const data = await response.json();\n  const coordinates = { lat: data[0].lat, lon: data[0].lon };\n  return coordinates;\n};\n//popularea cardurilor din sectiunea five-days\nconst getWeatherData = async () => {\n  const { lat, lon } = await cityCoordinates();\n  const response = await fetch(urlForFiveDaysWeather(lat, lon));\n  const weather = await response.json();\n  const dailyData = [];\n  weather.list.forEach(item => {\n    getDailyData(item, dailyData);\n  });\n  cardsList.innerHTML = '';\n  dailyData.forEach((item, index) => {\n    //aceasta conditie este pentru a elimina ziua curenta, deja este vizibila pe homepage\n    if (index === 0) {\n      return;\n    }\n    createCardsMarkup(item, cardsList, iconMapping);\n  });\n};\n\ngetWeatherData();\n\n//functie pentru popularea cardurilor more-info\nconst getMoreInfoData = async () => {\n  const { lat, lon } = await cityCoordinates();\n  const response = await fetch(urlForFiveDaysWeather(lat, lon));\n  const weather = await response.json();\n\n  const moreInfo = [];\n  weather.list.forEach(item => {\n    moreInfoData(item, moreInfo);\n  });\n  const dataForDay = moreInfo[selectedDay];\n  createMoreInfoMarkup(dataForDay, moreInfoContainer, iconMapping);\n};\n\nconst getMoreInfoDataForSearchedCity = async () => {\n  const { lat, lon } = await searchedCityCoordinates();\n  const response = await fetch(urlForFiveDaysWeather(lat, lon));\n  const weather = await response.json();\n\n  const moreInfo = [];\n  weather.list.forEach(item => {\n    moreInfoData(item, moreInfo);\n  });\n  const dataForDay = moreInfo[selectedDay];\n  createMoreInfoMarkup(dataForDay, moreInfoContainer, iconMapping);\n};\n\n//event listener pentru a afla pe care buton \"more-info\" s-a dat click pentru a arata informatii pentru ziua relevanta\ncardsList.addEventListener('click', event => {\n  if (event.target.classList.contains('card__button')) {\n    const clickedDay = event.target.value;\n    const cards = document.querySelectorAll(\".card\");\n    cards.forEach(element => {\n      element.classList.remove(\"selected\")\n    })\n    event.target.parentElement.classList.add('selected');\n    if (\n      moreInfoCards.classList.contains('hidden') ||\n      selectedDay !== clickedDay\n    ) {\n      selectedDay = clickedDay;\n      moreInfoCards.classList.remove('hidden');\n        \n      fiveDaysSectionContainer.style.marginBottom = '400px';\n      getMoreInfoData().catch(err => {\n        console.log(err);\n      });\n    } else {\n      event.target.parentElement.classList.remove('selected');\n      moreInfoCards.classList.add('hidden');\n      fiveDaysSectionContainer.style.marginBottom = '0px';\n    }\n  }\n});\nimport { Notify } from 'notiflix/build/notiflix-notify-aio';\n\nconst searchForm = document.querySelector('#search-form');\nconst searchInput = document.querySelector('#search-input');\n\nconst getCityForecastData = async city => {\n  const { lat, lon } = await searchedCityCoordinates();\n  const response = await fetch(urlForFiveDaysWeather(lat, lon));\n  const weather = await response.json();\n  const dailyData = [];\n  weather.list.forEach(item => {\n    getDailyData(item, dailyData);\n  });\n  cardsList.innerHTML = '';\n  dailyData.forEach((item, index) => {\n    //aceasta conditie este pentru a elimina ziua curenta, deja este vizibila pe homepage\n    if (index === 0) {\n      return;\n    }\n    createCardsMarkup(item, cardsList, iconMapping);\n  });\n};\n\nsearchForm.addEventListener('submit', submitForm);\n\nfunction submitForm(event) {\n  event.preventDefault();\n\n  if (searchInput.value === '') {\n    Notify.info('Enter the city name, please!', {\n      position: 'center-center',\n    });\n    return;\n  }\n  // //    afisare oras ales + functie modificare background cu orasul ales - in caz ca nu exista poze sa se afiseze peisaje cu cerul??\n  //     // daca este accesat butonul today  - accesare functie pt today\n  //     // daca este accesat butonul fivedays - accesare functie five days\n  sectionTitle.textContent = searchInput.value;\n  city = searchInput.value;\n  getCityForecastData();\n}\n"],"names":["$erShb","parcelRequire","$2c73bca0d48a5792$var$selectedDay","$2c73bca0d48a5792$var$moreInfoCards","document","querySelector","$2c73bca0d48a5792$var$cardsList","$2c73bca0d48a5792$var$sectionTitle","$2c73bca0d48a5792$var$moreInfoContainer","$2c73bca0d48a5792$var$fiveDaysSectionContainer","$2c73bca0d48a5792$var$urlForFiveDaysWeather","lat","lon","$2c73bca0d48a5792$var$city","textContent","$2c73bca0d48a5792$var$cityCoordinates","async","response","fetch","data","json","$2c73bca0d48a5792$var$searchedCityCoordinates","city1","$2c73bca0d48a5792$var$searchInput","value","weather","dailyData","list","forEach","item","getDailyData","innerHTML","index","createCardsMarkup","iconMapping","$2c73bca0d48a5792$var$getWeatherData","addEventListener","event","target","classList","contains","clickedDay","querySelectorAll","element","remove","parentElement","add","style","marginBottom","moreInfo","moreInfoData","dataForDay","createMoreInfoMarkup","$2c73bca0d48a5792$var$getMoreInfoData","catch","err","console","log","$2c73bca0d48a5792$var$searchForm","preventDefault","$iQIUW","Notify","info","position","city","$2c73bca0d48a5792$var$getCityForecastData"],"version":3,"file":"index.c1557055.js.map"}