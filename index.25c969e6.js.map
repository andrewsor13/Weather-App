{"mappings":"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","sources":["src/chart.js"],"sourcesContent":["async function getWeatherData() {\n  const API_KEY = 'eeffed10f27ca7ccae26c84b46ee1ea8';\n  const city = 'Bucharest';\n\n  //Utilizare temperatura\n\n  try {\n    const response = await axios.get(\n      `https://api.openweathermap.org/data/2.5/forecast?q=${city}&appid=${API_KEY}&units=metric`\n    );\n\n    const weatherData = response.data.list\n      .slice(0, 8)\n      .map(item => item.main.temp);\n    const labels = response.data.list\n      .slice(0, 8)\n      .map(item => new Date(item.dt * 1000).toLocaleDateString());\n\n    return { weatherData, labels };\n  } catch (error) {\n    console.error('Eroare la obținerea datelor meteorologice:', error);\n    return null;\n  }\n}\n\n//Utilizare umiditate\n\nasync function getHumidityData() {\n  const API_KEY = 'eeffed10f27ca7ccae26c84b46ee1ea8';\n  const city = 'Bucharest';\n\n  try {\n    const response = await axios.get(\n      `https://api.openweathermap.org/data/2.5/forecast?q=${city}&appid=${API_KEY}&units=metric`\n    );\n\n    const humidityData = response.data.list\n      .slice(0, 8)\n      .map(item => item.main.humidity);\n    const labels = response.data.list\n      .slice(0, 8)\n      .map(item => new Date(item.dt * 1000).toLocaleDateString());\n\n    return { humidityData, labels };\n  } catch (error) {\n    console.error('Eroare la obținerea datelor de umiditate:', error);\n    return null;\n  }\n}\n\n//Utilizare viteza vantului\n\nasync function getWindData() {\n  const API_KEY = 'eeffed10f27ca7ccae26c84b46ee1ea8';\n  const city = 'Bucharest';\n\n  try {\n    const response = await axios.get(\n      `https://api.openweathermap.org/data/2.5/forecast?q=${city}&appid=${API_KEY}&units=metric`\n    );\n\n    const windData = response.data.list\n      .slice(0, 8)\n      .map(item => item.wind.speed);\n    const labels = response.data.list\n      .slice(0, 8)\n      .map(item => new Date(item.dt * 1000).toLocaleDateString());\n\n    return { windData, labels };\n  } catch (error) {\n    console.error('Eroare la obținerea datelor pentru viteza vantului:', error);\n    return null;\n  }\n}\n\n//Utilizare atmosferei\n\nasync function getAtmosphereData() {\n  const API_KEY = 'eeffed10f27ca7ccae26c84b46ee1ea8';\n  const city = 'Bucharest';\n\n  try {\n    const response = await axios.get(\n      `https://api.openweathermap.org/data/2.5/forecast?q=${city}&appid=${API_KEY}&units=metric`\n    );\n\n    const atmosphereData = response.data.list\n      .slice(0, 8)\n      .map(item => item.main.pressure);\n    const labels = response.data.list\n      .slice(0, 8)\n      .map(item => new Date(item.dt * 1000).toLocaleDateString());\n\n    return { atmosphereData, labels };\n  } catch (error) {\n    console.error(\n      'Eroare la obținerea datelor pentru presiunea atmosferica:',\n      error\n    );\n    return null;\n  }\n}\n\n// Functia de generare CHART\n\nasync function generateWeatherChart() {\n  const weatherData = await getWeatherData();\n  const humidityData = await getHumidityData();\n  const windData = await getWindData();\n  const atmosphereData = await getAtmosphereData();\n  if (weatherData) {\n    const ctx = document.getElementById('myChart').getContext('2d');\n    new Chart(ctx, {\n      type: 'line',\n      data: {\n        labels: weatherData.labels,\n        datasets: [\n          {\n            label: 'Temperature',\n            data: weatherData.weatherData,\n            borderColor: 'rgb(255, 107, 9)',\n            borderWidth: 2,\n            fill: false,\n          },\n          {\n            label: 'Humidity',\n            data: humidityData.humidityData,\n            borderColor: 'rgb(9, 6, 235)',\n            borderWidth: 2,\n            fill: false,\n          },\n          {\n            label: 'Wind Speed',\n            data: windData.windData,\n            borderColor: 'rgb(234, 154, 5)',\n            borderWidth: 2,\n            fill: false,\n          },\n          {\n            label: 'Atmosphere pressure',\n            data: atmosphereData.atmosphereData,\n            borderColor: 'rgb(6, 120, 6)',\n            borderWidth: 2,\n            fill: false,\n          },\n        ],\n      },\n      options: {\n        responsive: true,\n        scales: {\n          x: {\n            grid: {\n              color: 'rgb(100, 100, 100)',\n            },\n            ticks: {\n              color: 'rgb(100, 100, 100)',\n            },\n          },\n          y: {\n            beginAtZero: true,\n            grid: {\n              color: 'rgb(100, 100, 100)',\n            },\n            ticks: {\n              color: 'rgb(100, 100, 100)',\n            },\n          },\n        },\n      },\n    });\n  }\n}\n\ngenerateWeatherChart();\n\nconst chartCanvas = document.getElementById('myChart');\nconst toggleButton = document.getElementById('chartButton');\n\nwindow.addEventListener('load', function () {\n  const buttonState = localStorage.getItem('buttonState');\n  if (buttonState) {\n    if (buttonState === 'visible') {\n      chartCanvas.style.display = 'block';\n      toggleButton.innerText = 'Hide Content';\n    } else {\n      chartCanvas.style.display = 'none';\n      toggleButton.innerText = 'Unhide Content';\n    }\n  }\n});\n\ntoggleButton.addEventListener('click', function (event) {\n  event.preventDefault();\n  if (chartCanvas.style.display === 'none') {\n    chartCanvas.style.display = 'block';\n    toggleButton.innerText = 'Hide Content';\n    localStorage.setItem('buttonState', 'visible');\n  } else {\n    chartCanvas.style.display = 'none';\n    toggleButton.innerText = 'Unhide Content';\n    localStorage.setItem('buttonState', 'hidden');\n  }\n});\n"],"names":["async","weatherData","response","axios","get","data","list","slice","map","item","main","temp","Date","dt","toLocaleDateString","error","console","$75efa7970c8def7a$var$getWeatherData","humidityData","humidity","$75efa7970c8def7a$var$getHumidityData","windData","wind","speed","$75efa7970c8def7a$var$getWindData","atmosphereData","pressure","$75efa7970c8def7a$var$getAtmosphereData","ctx","document","getElementById","getContext","Chart","type","labels","datasets","label","borderColor","borderWidth","fill","options","responsive","scales","x","grid","color","ticks","y","beginAtZero","$75efa7970c8def7a$var$generateWeatherChart","$75efa7970c8def7a$var$chartCanvas","$75efa7970c8def7a$var$toggleButton","window","addEventListener","buttonState","localStorage","getItem","style","display","innerText","event","preventDefault","setItem"],"version":3,"file":"index.25c969e6.js.map"}