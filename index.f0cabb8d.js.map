{"mappings":"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","sources":["src/components/Chart/chart.js"],"sourcesContent":["async function getWeatherData() {\n  const API_KEY = '072ec51636e5141423703ba32d12100f';\n  const city = 'Bucharest';\n\n  //Utilizare temperatura\n\n  try {\n    const response = await axios.get(\n      `https://api.openweathermap.org/data/2.5/forecast?q=${city}&appid=${API_KEY}&units=metric`\n    );\n\n    const weatherData = response.data.list\n      .slice(0, 5)\n      .map(item => item.main.temp);\n\n    // selectia datelor calendaristice\n\n    const labels = response.data.list.slice(0, 5).map(item => {\n      const date = new Date(item.dt * 1000);\n      const day = date.getDate().toString().padStart(2, '0');\n      const month = (date.getMonth() + 1).toString().padStart(2, '0');\n      const year = date.getFullYear();\n      const hours = date.getHours();\n      const minutes = date.getMinutes();\n      return `${day}/${month}/${year} ${hours}:${\n        minutes < 10 ? '0' : ''\n      }${minutes}`;\n    });\n\n    return { weatherData, labels };\n  } catch (error) {\n    console.error('Eroare la obținerea datelor meteorologice:', error);\n    return null;\n  }\n}\n\n//Utilizare umiditate\n\nasync function getHumidityData() {\n  const API_KEY = '072ec51636e5141423703ba32d12100f';\n  const city = 'Bucharest';\n\n  try {\n    const response = await axios.get(\n      `https://api.openweathermap.org/data/2.5/forecast?q=${city}&appid=${API_KEY}&units=metric`\n    );\n\n    const humidityData = response.data.list\n      .slice(0, 5)\n      .map(item => item.main.humidity);\n    const labels = response.data.list.slice(0, 5).map(item => {\n      const date = new Date(item.dt * 1000);\n      const day = date.getDate().toString().padStart(2, '0');\n      const month = (date.getMonth() + 1).toString().padStart(2, '0');\n      const year = date.getFullYear();\n      const hours = date.getHours();\n      const minutes = date.getMinutes();\n      return `${day}/${month}/${year} ${hours}:${\n        minutes < 10 ? '0' : ''\n      }${minutes}`;\n    });\n\n    return { humidityData, labels };\n  } catch (error) {\n    console.error('Eroare la obținerea datelor de umiditate:', error);\n    return null;\n  }\n}\n\n//Utilizare viteza vantului\n\nasync function getWindData() {\n  const API_KEY = '072ec51636e5141423703ba32d12100f';\n  const city = 'Bucharest';\n\n  try {\n    const response = await axios.get(\n      `https://api.openweathermap.org/data/2.5/forecast?q=${city}&appid=${API_KEY}&units=metric`\n    );\n\n    const windData = response.data.list\n      .slice(0, 5)\n      .map(item => item.wind.speed);\n    const labels = response.data.list.slice(0, 5).map(item => {\n      const date = new Date(item.dt * 1000);\n      const day = date.getDate().toString().padStart(2, '0');\n      const month = (date.getMonth() + 1).toString().padStart(2, '0');\n      const year = date.getFullYear();\n      const hours = date.getHours();\n      const minutes = date.getMinutes();\n      return `${day}/${month}/${year} ${hours}:${\n        minutes < 10 ? '0' : ''\n      }${minutes}`;\n    });\n\n    return { windData, labels };\n  } catch (error) {\n    console.error('Eroare la obținerea datelor pentru viteza vantului:', error);\n    return null;\n  }\n}\n\n//Utilizare atmosferei\n\nasync function getAtmosphereData() {\n  const API_KEY = '072ec51636e5141423703ba32d12100f';\n  const city = 'Bucharest';\n\n  try {\n    const response = await axios.get(\n      `https://api.openweathermap.org/data/2.5/forecast?q=${city}&appid=${API_KEY}&units=metric`\n    );\n\n    const atmosphereData = response.data.list\n      .slice(0, 5)\n      .map(item => item.main.pressure);\n\n    const labels = response.data.list.slice(0, 5).map(item => {\n      const date = new Date(item.dt * 1000);\n      const day = date.getDate().toString().padStart(2, '0');\n      const month = (date.getMonth() + 1).toString().padStart(2, '0');\n      const year = date.getFullYear();\n      const hours = date.getHours();\n      const minutes = date.getMinutes();\n      return `${day}/${month}/${year} ${hours}:${\n        minutes < 10 ? '0' : ''\n      }${minutes}`;\n    });\n\n    return { atmosphereData, labels };\n  } catch (error) {\n    console.error(\n      'Eroare la obținerea datelor pentru presiunea atmosferica:',\n      error\n    );\n    return null;\n  }\n}\n\n// Functia de generare CHART\n\nasync function generateWeatherChart() {\n  const weatherData = await getWeatherData();\n  const humidityData = await getHumidityData();\n  const windData = await getWindData();\n  const atmosphereData = await getAtmosphereData();\n  if (weatherData) {\n    const ctx = document.getElementById('myChart').getContext('2d');\n    const chartFont = () => {\n      if (window.innerWidth < 480) {\n        return 12;\n      } else {\n        return 18;\n      }\n    };\n    new Chart(ctx, {\n      type: 'line',\n      data: {\n        labels: weatherData.labels,\n        datasets: [\n          {\n            label: 'Temperature',\n            data: weatherData.weatherData,\n            borderColor: 'rgb(255, 107, 9)',\n            borderWidth: 2,\n            fill: false,\n          },\n          {\n            label: 'Humidity',\n            data: humidityData.humidityData,\n            borderColor: 'rgb(9, 6, 235)',\n            borderWidth: 2,\n            fill: false,\n          },\n          {\n            label: 'Wind Speed',\n            data: windData.windData,\n            borderColor: 'rgb(234, 154, 5)',\n            borderWidth: 2,\n            fill: false,\n          },\n          {\n            label: 'Atmosphere pressure',\n            data: atmosphereData.atmosphereData,\n            borderColor: 'rgb(6, 120, 6)',\n            borderWidth: 2,\n            fill: false,\n          },\n        ],\n      },\n      options: {\n        responsive: true,\n        scales: {\n          x: {\n            grid: {\n              color: 'rgb(100, 100, 100)',\n            },\n            ticks: {\n              color: 'rgb(100, 100, 100)',\n            },\n            title: {\n              display: true,\n              text: 'Date[dd/mm/yyyy - hour/minutes]',\n              color: 'rgb(100, 100, 100)',\n              font: {\n                size: chartFont(),\n              },\n            },\n          },\n          y: {\n            beginAtZero: true,\n            grid: {\n              color: 'rgb(100, 100, 100)',\n            },\n            ticks: {\n              color: 'rgb(100, 100, 100)',\n            },\n            title: {\n              display: true,\n              text: 'Value of Indicators',\n              color: 'rgb(100, 100, 100)',\n              font: {\n                size: chartFont(),\n              },\n            },\n          },\n        },\n      },\n    });\n    const chartContainer = document.querySelector('.chart-container');\n    chartContainer.classList.add('hidden');\n\n    localStorage.setItem('chartContainerActivated', 'false');\n  }\n}\n\nwindow.addEventListener('resize', () => {\n  myChart.options.scales.x.ticks.font.size = chartFont();\n  myChart.options.scales.y.ticks.font.size = chartFont();\n  myChart.update();\n});\n\ngenerateWeatherChart();\n\n//Evenimente pentru functionalitatile graficului\n\nconst chartCanvas = document.getElementById('myChart');\nconst toggleButton = document.getElementById('chartButton');\n\nwindow.addEventListener('load', function () {\n  const chartState = localStorage.getItem('chartContainerActivated');\n\n  if (chartState === 'true') {\n    chartCanvas.style.display = 'block';\n    toggleButton.innerText = 'Hide Chart';\n  } else {\n    chartCanvas.style.display = 'none';\n    toggleButton.innerText = 'Show Chart';\n  }\n});\n\ntoggleButton.addEventListener('click', function (event) {\n  event.preventDefault();\n  if (chartCanvas.style.display === 'none') {\n    chartCanvas.style.display = 'block';\n    toggleButton.innerText = 'Hide Chart';\n    localStorage.setItem('chartContainerActivated', 'true');\n  } else {\n    chartCanvas.style.display = 'none';\n    toggleButton.innerText = 'Show Chart';\n    localStorage.setItem('chartContainerActivated', 'false');\n  }\n});\n\nchartCanvas.style.display = 'none';\n\n// Aparitia si Disparitia graficului in functie de pagina din browser\n\nfunction activateChartContainer() {\n  var chartContainer = document.querySelector('.chart-container');\n\n  if (chartContainer) {\n    chartContainer.classList.remove('hidden');\n    localStorage.setItem('chartContainerActivated', 'true');\n\n    var toggleButton = document.getElementById('chartButton');\n    toggleButton.innerText = 'Show Chart';\n  }\n}\n\n// Aparitia si Disparitia graficului in functie de pagina\n\nvar activateButton = document.getElementById('5-days-button');\nactivateButton.addEventListener('click', activateChartContainer);\n\nfunction deactivateChartContainer() {\n  var chartContainer = document.querySelector('.chart-container');\n  if (chartContainer) {\n    chartContainer.classList.add('hidden');\n    localStorage.setItem('chartContainerDeactivated', 'true');\n  }\n}\n\nvar deactivateButton = document.getElementById('today-button');\ndeactivateButton.addEventListener('click', deactivateChartContainer);\n"],"names":["window","addEventListener","myChart","options","scales","x","ticks","font","size","chartFont","y","update","async","weatherData","response","axios","get","data","list","slice","map","item","main","temp","date","Date","dt","day","getDate","toString","padStart","month","getMonth","year","getFullYear","hours","getHours","minutes","getMinutes","error","console","$9895ddb3654954db$var$getWeatherData","humidityData","humidity","$9895ddb3654954db$var$getHumidityData","windData","wind","speed","$9895ddb3654954db$var$getWindData","atmosphereData","pressure","$9895ddb3654954db$var$getAtmosphereData","ctx","document","getElementById","getContext","innerWidth","Chart","type","labels","datasets","label","borderColor","borderWidth","fill","responsive","grid","color","title","display","text","beginAtZero","querySelector","classList","add","localStorage","setItem","$9895ddb3654954db$var$generateWeatherChart","$9895ddb3654954db$var$chartCanvas","$9895ddb3654954db$var$toggleButton","getItem","style","innerText","event","preventDefault","chartContainer","remove"],"version":3,"file":"index.f0cabb8d.js.map"}