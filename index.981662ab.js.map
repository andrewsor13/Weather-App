{"mappings":"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","sources":["src/chart.js"],"sourcesContent":["async function getWeatherData() {\n  const API_KEY = 'eeffed10f27ca7ccae26c84b46ee1ea8';\n  const city = 'Bucharest';\n\n  //Utilizare temperatura\n\n  try {\n    const response = await axios.get(\n      `https://api.openweathermap.org/data/2.5/forecast?q=${city}&appid=${API_KEY}&units=metric`\n    );\n\n    const weatherData = response.data.list\n      .slice(0, 8)\n      .map(item => item.main.temp);\n    const labels = response.data.list\n      .slice(0, 8)\n      .map(item => new Date(item.dt * 1000).toLocaleDateString());\n\n    return { weatherData, labels };\n  } catch (error) {\n    console.error('Eroare la obținerea datelor meteorologice:', error);\n    return null;\n  }\n}\n\n//Utilizare umiditate\n\nasync function getHumidityData() {\n  const API_KEY = 'eeffed10f27ca7ccae26c84b46ee1ea8';\n  const city = 'Bucharest';\n\n  try {\n    const response = await axios.get(\n      `https://api.openweathermap.org/data/2.5/forecast?q=${city}&appid=${API_KEY}&units=metric`\n    );\n\n    const humidityData = response.data.list\n      .slice(0, 8)\n      .map(item => item.main.humidity);\n    const labels = response.data.list\n      .slice(0, 8)\n      .map(item => new Date(item.dt * 1000).toLocaleDateString());\n\n    return { humidityData, labels };\n  } catch (error) {\n    console.error('Eroare la obținerea datelor de umiditate:', error);\n    return null;\n  }\n}\n\n//Utilizare viteza vantului\n\nasync function getWindData() {\n  const API_KEY = 'eeffed10f27ca7ccae26c84b46ee1ea8';\n  const city = 'Bucharest';\n\n  try {\n    const response = await axios.get(\n      `https://api.openweathermap.org/data/2.5/forecast?q=${city}&appid=${API_KEY}&units=metric`\n    );\n\n    const windData = response.data.list\n      .slice(0, 8)\n      .map(item => item.wind.speed);\n    const labels = response.data.list\n      .slice(0, 8)\n      .map(item => new Date(item.dt * 1000).toLocaleDateString());\n\n    return { windData, labels };\n  } catch (error) {\n    console.error('Eroare la obținerea datelor pentru viteza vantului:', error);\n    return null;\n  }\n}\n\n//Utilizare atmosferei\n\nasync function getAtmosphereData() {\n  const API_KEY = 'eeffed10f27ca7ccae26c84b46ee1ea8';\n  const city = 'Bucharest';\n\n  try {\n    const response = await axios.get(\n      `https://api.openweathermap.org/data/2.5/forecast?q=${city}&appid=${API_KEY}&units=metric`\n    );\n\n    const atmosphereData = response.data.list\n      .slice(0, 8)\n      .map(item => item.main.pressure);\n    const labels = response.data.list\n      .slice(0, 8)\n      .map(item => new Date(item.dt * 1000).toLocaleDateString());\n\n    return { atmosphereData, labels };\n  } catch (error) {\n    console.error(\n      'Eroare la obținerea datelor pentru presiunea atmosferica:',\n      error\n    );\n    return null;\n  }\n}\n\n// Functia de generare CHART\n\nasync function generateWeatherChart() {\n  const weatherData = await getWeatherData();\n  const humidityData = await getHumidityData();\n  const windData = await getWindData();\n  const atmosphereData = await getAtmosphereData();\n  if (weatherData) {\n    const ctx = document.getElementById('myChart').getContext('2d');\n    new Chart(ctx, {\n      type: 'line',\n      data: {\n        labels: weatherData.labels,\n        datasets: [\n          {\n            label: 'Temperature',\n            data: weatherData.weatherData,\n            borderColor: 'rgb(255, 107, 9)',\n            borderWidth: 2,\n            fill: false,\n          },\n          {\n            label: 'Humidity',\n            data: humidityData.humidityData,\n            borderColor: 'rgb(9, 6, 235)',\n            borderWidth: 2,\n            fill: false,\n          },\n          {\n            label: 'Wind Speed',\n            data: windData.windData,\n            borderColor: 'rgb(234, 154, 5)',\n            borderWidth: 2,\n            fill: false,\n          },\n          {\n            label: 'Atmosphere pressure',\n            data: atmosphereData.atmosphereData,\n            borderColor: 'rgb(6, 120, 6)',\n            borderWidth: 2,\n            fill: false,\n          },\n        ],\n      },\n      options: {\n        responsive: true,\n        scales: {\n          x: {\n            grid: {\n              color: 'rgb(100, 100, 100)',\n            },\n            ticks: {\n              color: 'rgb(100, 100, 100)',\n            },\n          },\n          y: {\n            beginAtZero: true,\n            grid: {\n              color: 'rgb(100, 100, 100)',\n            },\n            ticks: {\n              color: 'rgb(100, 100, 100)',\n            },\n          },\n        },\n      },\n    });\n  }\n}\n\ngenerateWeatherChart();\n\nconst chartCanvas = document.getElementById('myChart');\nconst toggleButton = document.getElementById('chartButton');\n\nwindow.addEventListener('load', function () {\n  const buttonState = localStorage.getItem('buttonState');\n  if (buttonState) {\n    if (buttonState === 'visible') {\n      chartCanvas.style.display = 'block';\n      toggleButton.innerText = 'Hide Content';\n    } else {\n      chartCanvas.style.display = 'none';\n      toggleButton.innerText = 'Unhide Content';\n    }\n  }\n});\n\ntoggleButton.addEventListener('click', function (event) {\n  event.preventDefault();\n  if (chartCanvas.style.display === 'none') {\n    chartCanvas.style.display = 'block';\n    toggleButton.innerText = 'Hide Content';\n    localStorage.setItem('buttonState', 'visible');\n  } else {\n    chartCanvas.style.display = 'none';\n    toggleButton.innerText = 'Unhide Content';\n    localStorage.setItem('buttonState', 'hidden');\n  }\n});\n"],"names":["$bpxeT","parcelRequire","$c013e93702271f8c$var$getWeatherData","$c013e93702271f8c$var$_getWeatherData","apply","this","arguments","$parcel$interopDefault","$2TvXO","mark","_callee","response","weatherData","labels","axios","get","concat","_ctx","sent","data","list","slice","map","item","main","temp","Date","dt","toLocaleDateString","console","error","t0","$c013e93702271f8c$var$getHumidityData","$c013e93702271f8c$var$_getHumidityData","humidityData","humidity","$c013e93702271f8c$var$getWindData","$c013e93702271f8c$var$_getWindData","windData","wind","speed","$c013e93702271f8c$var$getAtmosphereData","$c013e93702271f8c$var$_getAtmosphereData","atmosphereData","pressure","$c013e93702271f8c$var$_generateWeatherChart","ctx","document","getElementById","getContext","Chart","type","datasets","label","borderColor","borderWidth","fill","options","responsive","scales","x","grid","color","ticks","y","beginAtZero","$c013e93702271f8c$var$generateWeatherChart","$c013e93702271f8c$var$chartCanvas","$c013e93702271f8c$var$toggleButton","window","addEventListener","buttonState","localStorage","getItem","style","display","innerText","event","preventDefault","setItem"],"version":3,"file":"index.981662ab.js.map"}